// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clinic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_clinic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_clinic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_clinic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_clinic_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clinic_2eproto;
namespace clinic_data {
class VisitsData;
struct VisitsDataDefaultTypeInternal;
extern VisitsDataDefaultTypeInternal _VisitsData_default_instance_;
class VisitsData_Doctor;
struct VisitsData_DoctorDefaultTypeInternal;
extern VisitsData_DoctorDefaultTypeInternal _VisitsData_Doctor_default_instance_;
class VisitsData_Patient;
struct VisitsData_PatientDefaultTypeInternal;
extern VisitsData_PatientDefaultTypeInternal _VisitsData_Patient_default_instance_;
class VisitsData_Room;
struct VisitsData_RoomDefaultTypeInternal;
extern VisitsData_RoomDefaultTypeInternal _VisitsData_Room_default_instance_;
class VisitsData_Visit;
struct VisitsData_VisitDefaultTypeInternal;
extern VisitsData_VisitDefaultTypeInternal _VisitsData_Visit_default_instance_;
class VisitsData_Visits;
struct VisitsData_VisitsDefaultTypeInternal;
extern VisitsData_VisitsDefaultTypeInternal _VisitsData_Visits_default_instance_;
class Workers;
struct WorkersDefaultTypeInternal;
extern WorkersDefaultTypeInternal _Workers_default_instance_;
class Workers_Doctor;
struct Workers_DoctorDefaultTypeInternal;
extern Workers_DoctorDefaultTypeInternal _Workers_Doctor_default_instance_;
class Workers_Doctors;
struct Workers_DoctorsDefaultTypeInternal;
extern Workers_DoctorsDefaultTypeInternal _Workers_Doctors_default_instance_;
class Workers_Receptionist;
struct Workers_ReceptionistDefaultTypeInternal;
extern Workers_ReceptionistDefaultTypeInternal _Workers_Receptionist_default_instance_;
class Workers_Receptionists;
struct Workers_ReceptionistsDefaultTypeInternal;
extern Workers_ReceptionistsDefaultTypeInternal _Workers_Receptionists_default_instance_;
}  // namespace clinic_data
PROTOBUF_NAMESPACE_OPEN
template<> ::clinic_data::VisitsData* Arena::CreateMaybeMessage<::clinic_data::VisitsData>(Arena*);
template<> ::clinic_data::VisitsData_Doctor* Arena::CreateMaybeMessage<::clinic_data::VisitsData_Doctor>(Arena*);
template<> ::clinic_data::VisitsData_Patient* Arena::CreateMaybeMessage<::clinic_data::VisitsData_Patient>(Arena*);
template<> ::clinic_data::VisitsData_Room* Arena::CreateMaybeMessage<::clinic_data::VisitsData_Room>(Arena*);
template<> ::clinic_data::VisitsData_Visit* Arena::CreateMaybeMessage<::clinic_data::VisitsData_Visit>(Arena*);
template<> ::clinic_data::VisitsData_Visits* Arena::CreateMaybeMessage<::clinic_data::VisitsData_Visits>(Arena*);
template<> ::clinic_data::Workers* Arena::CreateMaybeMessage<::clinic_data::Workers>(Arena*);
template<> ::clinic_data::Workers_Doctor* Arena::CreateMaybeMessage<::clinic_data::Workers_Doctor>(Arena*);
template<> ::clinic_data::Workers_Doctors* Arena::CreateMaybeMessage<::clinic_data::Workers_Doctors>(Arena*);
template<> ::clinic_data::Workers_Receptionist* Arena::CreateMaybeMessage<::clinic_data::Workers_Receptionist>(Arena*);
template<> ::clinic_data::Workers_Receptionists* Arena::CreateMaybeMessage<::clinic_data::Workers_Receptionists>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clinic_data {

// ===================================================================

class VisitsData_Visit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clinic_data.VisitsData.Visit) */ {
 public:
  inline VisitsData_Visit() : VisitsData_Visit(nullptr) {}
  ~VisitsData_Visit() override;
  explicit PROTOBUF_CONSTEXPR VisitsData_Visit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VisitsData_Visit(const VisitsData_Visit& from);
  VisitsData_Visit(VisitsData_Visit&& from) noexcept
    : VisitsData_Visit() {
    *this = ::std::move(from);
  }

  inline VisitsData_Visit& operator=(const VisitsData_Visit& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisitsData_Visit& operator=(VisitsData_Visit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisitsData_Visit& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisitsData_Visit* internal_default_instance() {
    return reinterpret_cast<const VisitsData_Visit*>(
               &_VisitsData_Visit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VisitsData_Visit& a, VisitsData_Visit& b) {
    a.Swap(&b);
  }
  inline void Swap(VisitsData_Visit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisitsData_Visit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisitsData_Visit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VisitsData_Visit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VisitsData_Visit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VisitsData_Visit& from) {
    VisitsData_Visit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisitsData_Visit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clinic_data.VisitsData.Visit";
  }
  protected:
  explicit VisitsData_Visit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTreatmentsFieldNumber = 4,
    kVisitInformationFieldNumber = 5,
    kDoctorFieldNumber = 1,
    kPatientFieldNumber = 2,
    kRoomFieldNumber = 3,
  };
  // repeated string treatments = 4;
  int treatments_size() const;
  private:
  int _internal_treatments_size() const;
  public:
  void clear_treatments();
  const std::string& treatments(int index) const;
  std::string* mutable_treatments(int index);
  void set_treatments(int index, const std::string& value);
  void set_treatments(int index, std::string&& value);
  void set_treatments(int index, const char* value);
  void set_treatments(int index, const char* value, size_t size);
  std::string* add_treatments();
  void add_treatments(const std::string& value);
  void add_treatments(std::string&& value);
  void add_treatments(const char* value);
  void add_treatments(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& treatments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_treatments();
  private:
  const std::string& _internal_treatments(int index) const;
  std::string* _internal_add_treatments();
  public:

  // string visit_information = 5;
  void clear_visit_information();
  const std::string& visit_information() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_visit_information(ArgT0&& arg0, ArgT... args);
  std::string* mutable_visit_information();
  PROTOBUF_NODISCARD std::string* release_visit_information();
  void set_allocated_visit_information(std::string* visit_information);
  private:
  const std::string& _internal_visit_information() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_visit_information(const std::string& value);
  std::string* _internal_mutable_visit_information();
  public:

  // .clinic_data.VisitsData.Doctor doctor = 1;
  bool has_doctor() const;
  private:
  bool _internal_has_doctor() const;
  public:
  void clear_doctor();
  const ::clinic_data::VisitsData_Doctor& doctor() const;
  PROTOBUF_NODISCARD ::clinic_data::VisitsData_Doctor* release_doctor();
  ::clinic_data::VisitsData_Doctor* mutable_doctor();
  void set_allocated_doctor(::clinic_data::VisitsData_Doctor* doctor);
  private:
  const ::clinic_data::VisitsData_Doctor& _internal_doctor() const;
  ::clinic_data::VisitsData_Doctor* _internal_mutable_doctor();
  public:
  void unsafe_arena_set_allocated_doctor(
      ::clinic_data::VisitsData_Doctor* doctor);
  ::clinic_data::VisitsData_Doctor* unsafe_arena_release_doctor();

  // .clinic_data.VisitsData.Patient patient = 2;
  bool has_patient() const;
  private:
  bool _internal_has_patient() const;
  public:
  void clear_patient();
  const ::clinic_data::VisitsData_Patient& patient() const;
  PROTOBUF_NODISCARD ::clinic_data::VisitsData_Patient* release_patient();
  ::clinic_data::VisitsData_Patient* mutable_patient();
  void set_allocated_patient(::clinic_data::VisitsData_Patient* patient);
  private:
  const ::clinic_data::VisitsData_Patient& _internal_patient() const;
  ::clinic_data::VisitsData_Patient* _internal_mutable_patient();
  public:
  void unsafe_arena_set_allocated_patient(
      ::clinic_data::VisitsData_Patient* patient);
  ::clinic_data::VisitsData_Patient* unsafe_arena_release_patient();

  // .clinic_data.VisitsData.Room room = 3;
  bool has_room() const;
  private:
  bool _internal_has_room() const;
  public:
  void clear_room();
  const ::clinic_data::VisitsData_Room& room() const;
  PROTOBUF_NODISCARD ::clinic_data::VisitsData_Room* release_room();
  ::clinic_data::VisitsData_Room* mutable_room();
  void set_allocated_room(::clinic_data::VisitsData_Room* room);
  private:
  const ::clinic_data::VisitsData_Room& _internal_room() const;
  ::clinic_data::VisitsData_Room* _internal_mutable_room();
  public:
  void unsafe_arena_set_allocated_room(
      ::clinic_data::VisitsData_Room* room);
  ::clinic_data::VisitsData_Room* unsafe_arena_release_room();

  // @@protoc_insertion_point(class_scope:clinic_data.VisitsData.Visit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> treatments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visit_information_;
    ::clinic_data::VisitsData_Doctor* doctor_;
    ::clinic_data::VisitsData_Patient* patient_;
    ::clinic_data::VisitsData_Room* room_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_clinic_2eproto;
};
// -------------------------------------------------------------------

class VisitsData_Doctor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clinic_data.VisitsData.Doctor) */ {
 public:
  inline VisitsData_Doctor() : VisitsData_Doctor(nullptr) {}
  ~VisitsData_Doctor() override;
  explicit PROTOBUF_CONSTEXPR VisitsData_Doctor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VisitsData_Doctor(const VisitsData_Doctor& from);
  VisitsData_Doctor(VisitsData_Doctor&& from) noexcept
    : VisitsData_Doctor() {
    *this = ::std::move(from);
  }

  inline VisitsData_Doctor& operator=(const VisitsData_Doctor& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisitsData_Doctor& operator=(VisitsData_Doctor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisitsData_Doctor& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisitsData_Doctor* internal_default_instance() {
    return reinterpret_cast<const VisitsData_Doctor*>(
               &_VisitsData_Doctor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VisitsData_Doctor& a, VisitsData_Doctor& b) {
    a.Swap(&b);
  }
  inline void Swap(VisitsData_Doctor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisitsData_Doctor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisitsData_Doctor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VisitsData_Doctor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VisitsData_Doctor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VisitsData_Doctor& from) {
    VisitsData_Doctor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisitsData_Doctor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clinic_data.VisitsData.Doctor";
  }
  protected:
  explicit VisitsData_Doctor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSurnameFieldNumber = 2,
    kPeselFieldNumber = 3,
    kGenderFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string surname = 2;
  void clear_surname();
  const std::string& surname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_surname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_surname();
  PROTOBUF_NODISCARD std::string* release_surname();
  void set_allocated_surname(std::string* surname);
  private:
  const std::string& _internal_surname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_surname(const std::string& value);
  std::string* _internal_mutable_surname();
  public:

  // string pesel = 3;
  void clear_pesel();
  const std::string& pesel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pesel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pesel();
  PROTOBUF_NODISCARD std::string* release_pesel();
  void set_allocated_pesel(std::string* pesel);
  private:
  const std::string& _internal_pesel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pesel(const std::string& value);
  std::string* _internal_mutable_pesel();
  public:

  // string gender = 4;
  void clear_gender();
  const std::string& gender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gender();
  PROTOBUF_NODISCARD std::string* release_gender();
  void set_allocated_gender(std::string* gender);
  private:
  const std::string& _internal_gender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gender(const std::string& value);
  std::string* _internal_mutable_gender();
  public:

  // @@protoc_insertion_point(class_scope:clinic_data.VisitsData.Doctor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr surname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pesel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_clinic_2eproto;
};
// -------------------------------------------------------------------

class VisitsData_Patient final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clinic_data.VisitsData.Patient) */ {
 public:
  inline VisitsData_Patient() : VisitsData_Patient(nullptr) {}
  ~VisitsData_Patient() override;
  explicit PROTOBUF_CONSTEXPR VisitsData_Patient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VisitsData_Patient(const VisitsData_Patient& from);
  VisitsData_Patient(VisitsData_Patient&& from) noexcept
    : VisitsData_Patient() {
    *this = ::std::move(from);
  }

  inline VisitsData_Patient& operator=(const VisitsData_Patient& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisitsData_Patient& operator=(VisitsData_Patient&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisitsData_Patient& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisitsData_Patient* internal_default_instance() {
    return reinterpret_cast<const VisitsData_Patient*>(
               &_VisitsData_Patient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VisitsData_Patient& a, VisitsData_Patient& b) {
    a.Swap(&b);
  }
  inline void Swap(VisitsData_Patient* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisitsData_Patient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisitsData_Patient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VisitsData_Patient>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VisitsData_Patient& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VisitsData_Patient& from) {
    VisitsData_Patient::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisitsData_Patient* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clinic_data.VisitsData.Patient";
  }
  protected:
  explicit VisitsData_Patient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSurnameFieldNumber = 2,
    kPeselFieldNumber = 3,
    kGenderFieldNumber = 4,
    kAllergensFieldNumber = 5,
    kDebtFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string surname = 2;
  void clear_surname();
  const std::string& surname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_surname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_surname();
  PROTOBUF_NODISCARD std::string* release_surname();
  void set_allocated_surname(std::string* surname);
  private:
  const std::string& _internal_surname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_surname(const std::string& value);
  std::string* _internal_mutable_surname();
  public:

  // string pesel = 3;
  void clear_pesel();
  const std::string& pesel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pesel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pesel();
  PROTOBUF_NODISCARD std::string* release_pesel();
  void set_allocated_pesel(std::string* pesel);
  private:
  const std::string& _internal_pesel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pesel(const std::string& value);
  std::string* _internal_mutable_pesel();
  public:

  // string gender = 4;
  void clear_gender();
  const std::string& gender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gender();
  PROTOBUF_NODISCARD std::string* release_gender();
  void set_allocated_gender(std::string* gender);
  private:
  const std::string& _internal_gender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gender(const std::string& value);
  std::string* _internal_mutable_gender();
  public:

  // string allergens = 5;
  void clear_allergens();
  const std::string& allergens() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_allergens(ArgT0&& arg0, ArgT... args);
  std::string* mutable_allergens();
  PROTOBUF_NODISCARD std::string* release_allergens();
  void set_allocated_allergens(std::string* allergens);
  private:
  const std::string& _internal_allergens() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_allergens(const std::string& value);
  std::string* _internal_mutable_allergens();
  public:

  // string debt = 6;
  void clear_debt();
  const std::string& debt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_debt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_debt();
  PROTOBUF_NODISCARD std::string* release_debt();
  void set_allocated_debt(std::string* debt);
  private:
  const std::string& _internal_debt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_debt(const std::string& value);
  std::string* _internal_mutable_debt();
  public:

  // @@protoc_insertion_point(class_scope:clinic_data.VisitsData.Patient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr surname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pesel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr allergens_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_clinic_2eproto;
};
// -------------------------------------------------------------------

class VisitsData_Room final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clinic_data.VisitsData.Room) */ {
 public:
  inline VisitsData_Room() : VisitsData_Room(nullptr) {}
  ~VisitsData_Room() override;
  explicit PROTOBUF_CONSTEXPR VisitsData_Room(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VisitsData_Room(const VisitsData_Room& from);
  VisitsData_Room(VisitsData_Room&& from) noexcept
    : VisitsData_Room() {
    *this = ::std::move(from);
  }

  inline VisitsData_Room& operator=(const VisitsData_Room& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisitsData_Room& operator=(VisitsData_Room&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisitsData_Room& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisitsData_Room* internal_default_instance() {
    return reinterpret_cast<const VisitsData_Room*>(
               &_VisitsData_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VisitsData_Room& a, VisitsData_Room& b) {
    a.Swap(&b);
  }
  inline void Swap(VisitsData_Room* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisitsData_Room* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisitsData_Room* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VisitsData_Room>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VisitsData_Room& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VisitsData_Room& from) {
    VisitsData_Room::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisitsData_Room* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clinic_data.VisitsData.Room";
  }
  protected:
  explicit VisitsData_Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTreatmentFieldNumber = 2,
    kRoomIdFieldNumber = 1,
  };
  // repeated string treatment = 2;
  int treatment_size() const;
  private:
  int _internal_treatment_size() const;
  public:
  void clear_treatment();
  const std::string& treatment(int index) const;
  std::string* mutable_treatment(int index);
  void set_treatment(int index, const std::string& value);
  void set_treatment(int index, std::string&& value);
  void set_treatment(int index, const char* value);
  void set_treatment(int index, const char* value, size_t size);
  std::string* add_treatment();
  void add_treatment(const std::string& value);
  void add_treatment(std::string&& value);
  void add_treatment(const char* value);
  void add_treatment(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& treatment() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_treatment();
  private:
  const std::string& _internal_treatment(int index) const;
  std::string* _internal_add_treatment();
  public:

  // uint32 room_id = 1;
  void clear_room_id();
  uint32_t room_id() const;
  void set_room_id(uint32_t value);
  private:
  uint32_t _internal_room_id() const;
  void _internal_set_room_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:clinic_data.VisitsData.Room)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> treatment_;
    uint32_t room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_clinic_2eproto;
};
// -------------------------------------------------------------------

class VisitsData_Visits final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clinic_data.VisitsData.Visits) */ {
 public:
  inline VisitsData_Visits() : VisitsData_Visits(nullptr) {}
  ~VisitsData_Visits() override;
  explicit PROTOBUF_CONSTEXPR VisitsData_Visits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VisitsData_Visits(const VisitsData_Visits& from);
  VisitsData_Visits(VisitsData_Visits&& from) noexcept
    : VisitsData_Visits() {
    *this = ::std::move(from);
  }

  inline VisitsData_Visits& operator=(const VisitsData_Visits& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisitsData_Visits& operator=(VisitsData_Visits&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisitsData_Visits& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisitsData_Visits* internal_default_instance() {
    return reinterpret_cast<const VisitsData_Visits*>(
               &_VisitsData_Visits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VisitsData_Visits& a, VisitsData_Visits& b) {
    a.Swap(&b);
  }
  inline void Swap(VisitsData_Visits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisitsData_Visits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisitsData_Visits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VisitsData_Visits>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VisitsData_Visits& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VisitsData_Visits& from) {
    VisitsData_Visits::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisitsData_Visits* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clinic_data.VisitsData.Visits";
  }
  protected:
  explicit VisitsData_Visits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisitsFieldNumber = 1,
  };
  // repeated .clinic_data.VisitsData.Visit visits = 1;
  int visits_size() const;
  private:
  int _internal_visits_size() const;
  public:
  void clear_visits();
  ::clinic_data::VisitsData_Visit* mutable_visits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clinic_data::VisitsData_Visit >*
      mutable_visits();
  private:
  const ::clinic_data::VisitsData_Visit& _internal_visits(int index) const;
  ::clinic_data::VisitsData_Visit* _internal_add_visits();
  public:
  const ::clinic_data::VisitsData_Visit& visits(int index) const;
  ::clinic_data::VisitsData_Visit* add_visits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clinic_data::VisitsData_Visit >&
      visits() const;

  // @@protoc_insertion_point(class_scope:clinic_data.VisitsData.Visits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clinic_data::VisitsData_Visit > visits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_clinic_2eproto;
};
// -------------------------------------------------------------------

class VisitsData final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:clinic_data.VisitsData) */ {
 public:
  inline VisitsData() : VisitsData(nullptr) {}
  explicit PROTOBUF_CONSTEXPR VisitsData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VisitsData(const VisitsData& from);
  VisitsData(VisitsData&& from) noexcept
    : VisitsData() {
    *this = ::std::move(from);
  }

  inline VisitsData& operator=(const VisitsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisitsData& operator=(VisitsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisitsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisitsData* internal_default_instance() {
    return reinterpret_cast<const VisitsData*>(
               &_VisitsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VisitsData& a, VisitsData& b) {
    a.Swap(&b);
  }
  inline void Swap(VisitsData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisitsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisitsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VisitsData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const VisitsData& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const VisitsData& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clinic_data.VisitsData";
  }
  protected:
  explicit VisitsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VisitsData_Visit Visit;
  typedef VisitsData_Doctor Doctor;
  typedef VisitsData_Patient Patient;
  typedef VisitsData_Room Room;
  typedef VisitsData_Visits Visits;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clinic_data.VisitsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_clinic_2eproto;
};
// -------------------------------------------------------------------

class Workers_Doctor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clinic_data.Workers.Doctor) */ {
 public:
  inline Workers_Doctor() : Workers_Doctor(nullptr) {}
  ~Workers_Doctor() override;
  explicit PROTOBUF_CONSTEXPR Workers_Doctor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Workers_Doctor(const Workers_Doctor& from);
  Workers_Doctor(Workers_Doctor&& from) noexcept
    : Workers_Doctor() {
    *this = ::std::move(from);
  }

  inline Workers_Doctor& operator=(const Workers_Doctor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Workers_Doctor& operator=(Workers_Doctor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Workers_Doctor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Workers_Doctor* internal_default_instance() {
    return reinterpret_cast<const Workers_Doctor*>(
               &_Workers_Doctor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Workers_Doctor& a, Workers_Doctor& b) {
    a.Swap(&b);
  }
  inline void Swap(Workers_Doctor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Workers_Doctor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Workers_Doctor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Workers_Doctor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Workers_Doctor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Workers_Doctor& from) {
    Workers_Doctor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Workers_Doctor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clinic_data.Workers.Doctor";
  }
  protected:
  explicit Workers_Doctor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSurnameFieldNumber = 2,
    kPeselFieldNumber = 3,
    kGenderFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string surname = 2;
  void clear_surname();
  const std::string& surname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_surname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_surname();
  PROTOBUF_NODISCARD std::string* release_surname();
  void set_allocated_surname(std::string* surname);
  private:
  const std::string& _internal_surname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_surname(const std::string& value);
  std::string* _internal_mutable_surname();
  public:

  // string pesel = 3;
  void clear_pesel();
  const std::string& pesel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pesel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pesel();
  PROTOBUF_NODISCARD std::string* release_pesel();
  void set_allocated_pesel(std::string* pesel);
  private:
  const std::string& _internal_pesel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pesel(const std::string& value);
  std::string* _internal_mutable_pesel();
  public:

  // string gender = 4;
  void clear_gender();
  const std::string& gender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gender();
  PROTOBUF_NODISCARD std::string* release_gender();
  void set_allocated_gender(std::string* gender);
  private:
  const std::string& _internal_gender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gender(const std::string& value);
  std::string* _internal_mutable_gender();
  public:

  // @@protoc_insertion_point(class_scope:clinic_data.Workers.Doctor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr surname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pesel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_clinic_2eproto;
};
// -------------------------------------------------------------------

class Workers_Receptionist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clinic_data.Workers.Receptionist) */ {
 public:
  inline Workers_Receptionist() : Workers_Receptionist(nullptr) {}
  ~Workers_Receptionist() override;
  explicit PROTOBUF_CONSTEXPR Workers_Receptionist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Workers_Receptionist(const Workers_Receptionist& from);
  Workers_Receptionist(Workers_Receptionist&& from) noexcept
    : Workers_Receptionist() {
    *this = ::std::move(from);
  }

  inline Workers_Receptionist& operator=(const Workers_Receptionist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Workers_Receptionist& operator=(Workers_Receptionist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Workers_Receptionist& default_instance() {
    return *internal_default_instance();
  }
  static inline const Workers_Receptionist* internal_default_instance() {
    return reinterpret_cast<const Workers_Receptionist*>(
               &_Workers_Receptionist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Workers_Receptionist& a, Workers_Receptionist& b) {
    a.Swap(&b);
  }
  inline void Swap(Workers_Receptionist* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Workers_Receptionist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Workers_Receptionist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Workers_Receptionist>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Workers_Receptionist& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Workers_Receptionist& from) {
    Workers_Receptionist::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Workers_Receptionist* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clinic_data.Workers.Receptionist";
  }
  protected:
  explicit Workers_Receptionist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSurnameFieldNumber = 2,
    kPeselFieldNumber = 3,
    kGenderFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string surname = 2;
  void clear_surname();
  const std::string& surname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_surname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_surname();
  PROTOBUF_NODISCARD std::string* release_surname();
  void set_allocated_surname(std::string* surname);
  private:
  const std::string& _internal_surname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_surname(const std::string& value);
  std::string* _internal_mutable_surname();
  public:

  // string pesel = 3;
  void clear_pesel();
  const std::string& pesel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pesel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pesel();
  PROTOBUF_NODISCARD std::string* release_pesel();
  void set_allocated_pesel(std::string* pesel);
  private:
  const std::string& _internal_pesel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pesel(const std::string& value);
  std::string* _internal_mutable_pesel();
  public:

  // string gender = 4;
  void clear_gender();
  const std::string& gender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gender();
  PROTOBUF_NODISCARD std::string* release_gender();
  void set_allocated_gender(std::string* gender);
  private:
  const std::string& _internal_gender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gender(const std::string& value);
  std::string* _internal_mutable_gender();
  public:

  // @@protoc_insertion_point(class_scope:clinic_data.Workers.Receptionist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr surname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pesel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_clinic_2eproto;
};
// -------------------------------------------------------------------

class Workers_Doctors final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clinic_data.Workers.Doctors) */ {
 public:
  inline Workers_Doctors() : Workers_Doctors(nullptr) {}
  ~Workers_Doctors() override;
  explicit PROTOBUF_CONSTEXPR Workers_Doctors(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Workers_Doctors(const Workers_Doctors& from);
  Workers_Doctors(Workers_Doctors&& from) noexcept
    : Workers_Doctors() {
    *this = ::std::move(from);
  }

  inline Workers_Doctors& operator=(const Workers_Doctors& from) {
    CopyFrom(from);
    return *this;
  }
  inline Workers_Doctors& operator=(Workers_Doctors&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Workers_Doctors& default_instance() {
    return *internal_default_instance();
  }
  static inline const Workers_Doctors* internal_default_instance() {
    return reinterpret_cast<const Workers_Doctors*>(
               &_Workers_Doctors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Workers_Doctors& a, Workers_Doctors& b) {
    a.Swap(&b);
  }
  inline void Swap(Workers_Doctors* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Workers_Doctors* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Workers_Doctors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Workers_Doctors>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Workers_Doctors& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Workers_Doctors& from) {
    Workers_Doctors::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Workers_Doctors* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clinic_data.Workers.Doctors";
  }
  protected:
  explicit Workers_Doctors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoctorsFieldNumber = 1,
  };
  // repeated .clinic_data.Workers.Doctor doctors = 1;
  int doctors_size() const;
  private:
  int _internal_doctors_size() const;
  public:
  void clear_doctors();
  ::clinic_data::Workers_Doctor* mutable_doctors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clinic_data::Workers_Doctor >*
      mutable_doctors();
  private:
  const ::clinic_data::Workers_Doctor& _internal_doctors(int index) const;
  ::clinic_data::Workers_Doctor* _internal_add_doctors();
  public:
  const ::clinic_data::Workers_Doctor& doctors(int index) const;
  ::clinic_data::Workers_Doctor* add_doctors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clinic_data::Workers_Doctor >&
      doctors() const;

  // @@protoc_insertion_point(class_scope:clinic_data.Workers.Doctors)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clinic_data::Workers_Doctor > doctors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_clinic_2eproto;
};
// -------------------------------------------------------------------

class Workers_Receptionists final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clinic_data.Workers.Receptionists) */ {
 public:
  inline Workers_Receptionists() : Workers_Receptionists(nullptr) {}
  ~Workers_Receptionists() override;
  explicit PROTOBUF_CONSTEXPR Workers_Receptionists(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Workers_Receptionists(const Workers_Receptionists& from);
  Workers_Receptionists(Workers_Receptionists&& from) noexcept
    : Workers_Receptionists() {
    *this = ::std::move(from);
  }

  inline Workers_Receptionists& operator=(const Workers_Receptionists& from) {
    CopyFrom(from);
    return *this;
  }
  inline Workers_Receptionists& operator=(Workers_Receptionists&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Workers_Receptionists& default_instance() {
    return *internal_default_instance();
  }
  static inline const Workers_Receptionists* internal_default_instance() {
    return reinterpret_cast<const Workers_Receptionists*>(
               &_Workers_Receptionists_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Workers_Receptionists& a, Workers_Receptionists& b) {
    a.Swap(&b);
  }
  inline void Swap(Workers_Receptionists* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Workers_Receptionists* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Workers_Receptionists* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Workers_Receptionists>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Workers_Receptionists& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Workers_Receptionists& from) {
    Workers_Receptionists::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Workers_Receptionists* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clinic_data.Workers.Receptionists";
  }
  protected:
  explicit Workers_Receptionists(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceptionistsFieldNumber = 1,
  };
  // repeated .clinic_data.Workers.Receptionist receptionists = 1;
  int receptionists_size() const;
  private:
  int _internal_receptionists_size() const;
  public:
  void clear_receptionists();
  ::clinic_data::Workers_Receptionist* mutable_receptionists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clinic_data::Workers_Receptionist >*
      mutable_receptionists();
  private:
  const ::clinic_data::Workers_Receptionist& _internal_receptionists(int index) const;
  ::clinic_data::Workers_Receptionist* _internal_add_receptionists();
  public:
  const ::clinic_data::Workers_Receptionist& receptionists(int index) const;
  ::clinic_data::Workers_Receptionist* add_receptionists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clinic_data::Workers_Receptionist >&
      receptionists() const;

  // @@protoc_insertion_point(class_scope:clinic_data.Workers.Receptionists)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clinic_data::Workers_Receptionist > receptionists_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_clinic_2eproto;
};
// -------------------------------------------------------------------

class Workers final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:clinic_data.Workers) */ {
 public:
  inline Workers() : Workers(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Workers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Workers(const Workers& from);
  Workers(Workers&& from) noexcept
    : Workers() {
    *this = ::std::move(from);
  }

  inline Workers& operator=(const Workers& from) {
    CopyFrom(from);
    return *this;
  }
  inline Workers& operator=(Workers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Workers& default_instance() {
    return *internal_default_instance();
  }
  static inline const Workers* internal_default_instance() {
    return reinterpret_cast<const Workers*>(
               &_Workers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Workers& a, Workers& b) {
    a.Swap(&b);
  }
  inline void Swap(Workers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Workers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Workers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Workers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Workers& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Workers& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clinic_data.Workers";
  }
  protected:
  explicit Workers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Workers_Doctor Doctor;
  typedef Workers_Receptionist Receptionist;
  typedef Workers_Doctors Doctors;
  typedef Workers_Receptionists Receptionists;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clinic_data.Workers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_clinic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VisitsData_Visit

// .clinic_data.VisitsData.Doctor doctor = 1;
inline bool VisitsData_Visit::_internal_has_doctor() const {
  return this != internal_default_instance() && _impl_.doctor_ != nullptr;
}
inline bool VisitsData_Visit::has_doctor() const {
  return _internal_has_doctor();
}
inline void VisitsData_Visit::clear_doctor() {
  if (GetArenaForAllocation() == nullptr && _impl_.doctor_ != nullptr) {
    delete _impl_.doctor_;
  }
  _impl_.doctor_ = nullptr;
}
inline const ::clinic_data::VisitsData_Doctor& VisitsData_Visit::_internal_doctor() const {
  const ::clinic_data::VisitsData_Doctor* p = _impl_.doctor_;
  return p != nullptr ? *p : reinterpret_cast<const ::clinic_data::VisitsData_Doctor&>(
      ::clinic_data::_VisitsData_Doctor_default_instance_);
}
inline const ::clinic_data::VisitsData_Doctor& VisitsData_Visit::doctor() const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Visit.doctor)
  return _internal_doctor();
}
inline void VisitsData_Visit::unsafe_arena_set_allocated_doctor(
    ::clinic_data::VisitsData_Doctor* doctor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.doctor_);
  }
  _impl_.doctor_ = doctor;
  if (doctor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clinic_data.VisitsData.Visit.doctor)
}
inline ::clinic_data::VisitsData_Doctor* VisitsData_Visit::release_doctor() {
  
  ::clinic_data::VisitsData_Doctor* temp = _impl_.doctor_;
  _impl_.doctor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clinic_data::VisitsData_Doctor* VisitsData_Visit::unsafe_arena_release_doctor() {
  // @@protoc_insertion_point(field_release:clinic_data.VisitsData.Visit.doctor)
  
  ::clinic_data::VisitsData_Doctor* temp = _impl_.doctor_;
  _impl_.doctor_ = nullptr;
  return temp;
}
inline ::clinic_data::VisitsData_Doctor* VisitsData_Visit::_internal_mutable_doctor() {
  
  if (_impl_.doctor_ == nullptr) {
    auto* p = CreateMaybeMessage<::clinic_data::VisitsData_Doctor>(GetArenaForAllocation());
    _impl_.doctor_ = p;
  }
  return _impl_.doctor_;
}
inline ::clinic_data::VisitsData_Doctor* VisitsData_Visit::mutable_doctor() {
  ::clinic_data::VisitsData_Doctor* _msg = _internal_mutable_doctor();
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Visit.doctor)
  return _msg;
}
inline void VisitsData_Visit::set_allocated_doctor(::clinic_data::VisitsData_Doctor* doctor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.doctor_;
  }
  if (doctor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(doctor);
    if (message_arena != submessage_arena) {
      doctor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doctor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.doctor_ = doctor;
  // @@protoc_insertion_point(field_set_allocated:clinic_data.VisitsData.Visit.doctor)
}

// .clinic_data.VisitsData.Patient patient = 2;
inline bool VisitsData_Visit::_internal_has_patient() const {
  return this != internal_default_instance() && _impl_.patient_ != nullptr;
}
inline bool VisitsData_Visit::has_patient() const {
  return _internal_has_patient();
}
inline void VisitsData_Visit::clear_patient() {
  if (GetArenaForAllocation() == nullptr && _impl_.patient_ != nullptr) {
    delete _impl_.patient_;
  }
  _impl_.patient_ = nullptr;
}
inline const ::clinic_data::VisitsData_Patient& VisitsData_Visit::_internal_patient() const {
  const ::clinic_data::VisitsData_Patient* p = _impl_.patient_;
  return p != nullptr ? *p : reinterpret_cast<const ::clinic_data::VisitsData_Patient&>(
      ::clinic_data::_VisitsData_Patient_default_instance_);
}
inline const ::clinic_data::VisitsData_Patient& VisitsData_Visit::patient() const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Visit.patient)
  return _internal_patient();
}
inline void VisitsData_Visit::unsafe_arena_set_allocated_patient(
    ::clinic_data::VisitsData_Patient* patient) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.patient_);
  }
  _impl_.patient_ = patient;
  if (patient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clinic_data.VisitsData.Visit.patient)
}
inline ::clinic_data::VisitsData_Patient* VisitsData_Visit::release_patient() {
  
  ::clinic_data::VisitsData_Patient* temp = _impl_.patient_;
  _impl_.patient_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clinic_data::VisitsData_Patient* VisitsData_Visit::unsafe_arena_release_patient() {
  // @@protoc_insertion_point(field_release:clinic_data.VisitsData.Visit.patient)
  
  ::clinic_data::VisitsData_Patient* temp = _impl_.patient_;
  _impl_.patient_ = nullptr;
  return temp;
}
inline ::clinic_data::VisitsData_Patient* VisitsData_Visit::_internal_mutable_patient() {
  
  if (_impl_.patient_ == nullptr) {
    auto* p = CreateMaybeMessage<::clinic_data::VisitsData_Patient>(GetArenaForAllocation());
    _impl_.patient_ = p;
  }
  return _impl_.patient_;
}
inline ::clinic_data::VisitsData_Patient* VisitsData_Visit::mutable_patient() {
  ::clinic_data::VisitsData_Patient* _msg = _internal_mutable_patient();
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Visit.patient)
  return _msg;
}
inline void VisitsData_Visit::set_allocated_patient(::clinic_data::VisitsData_Patient* patient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.patient_;
  }
  if (patient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(patient);
    if (message_arena != submessage_arena) {
      patient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patient, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.patient_ = patient;
  // @@protoc_insertion_point(field_set_allocated:clinic_data.VisitsData.Visit.patient)
}

// .clinic_data.VisitsData.Room room = 3;
inline bool VisitsData_Visit::_internal_has_room() const {
  return this != internal_default_instance() && _impl_.room_ != nullptr;
}
inline bool VisitsData_Visit::has_room() const {
  return _internal_has_room();
}
inline void VisitsData_Visit::clear_room() {
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
}
inline const ::clinic_data::VisitsData_Room& VisitsData_Visit::_internal_room() const {
  const ::clinic_data::VisitsData_Room* p = _impl_.room_;
  return p != nullptr ? *p : reinterpret_cast<const ::clinic_data::VisitsData_Room&>(
      ::clinic_data::_VisitsData_Room_default_instance_);
}
inline const ::clinic_data::VisitsData_Room& VisitsData_Visit::room() const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Visit.room)
  return _internal_room();
}
inline void VisitsData_Visit::unsafe_arena_set_allocated_room(
    ::clinic_data::VisitsData_Room* room) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_);
  }
  _impl_.room_ = room;
  if (room) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clinic_data.VisitsData.Visit.room)
}
inline ::clinic_data::VisitsData_Room* VisitsData_Visit::release_room() {
  
  ::clinic_data::VisitsData_Room* temp = _impl_.room_;
  _impl_.room_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::clinic_data::VisitsData_Room* VisitsData_Visit::unsafe_arena_release_room() {
  // @@protoc_insertion_point(field_release:clinic_data.VisitsData.Visit.room)
  
  ::clinic_data::VisitsData_Room* temp = _impl_.room_;
  _impl_.room_ = nullptr;
  return temp;
}
inline ::clinic_data::VisitsData_Room* VisitsData_Visit::_internal_mutable_room() {
  
  if (_impl_.room_ == nullptr) {
    auto* p = CreateMaybeMessage<::clinic_data::VisitsData_Room>(GetArenaForAllocation());
    _impl_.room_ = p;
  }
  return _impl_.room_;
}
inline ::clinic_data::VisitsData_Room* VisitsData_Visit::mutable_room() {
  ::clinic_data::VisitsData_Room* _msg = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Visit.room)
  return _msg;
}
inline void VisitsData_Visit::set_allocated_room(::clinic_data::VisitsData_Room* room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.room_;
  }
  if (room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(room);
    if (message_arena != submessage_arena) {
      room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.room_ = room;
  // @@protoc_insertion_point(field_set_allocated:clinic_data.VisitsData.Visit.room)
}

// repeated string treatments = 4;
inline int VisitsData_Visit::_internal_treatments_size() const {
  return _impl_.treatments_.size();
}
inline int VisitsData_Visit::treatments_size() const {
  return _internal_treatments_size();
}
inline void VisitsData_Visit::clear_treatments() {
  _impl_.treatments_.Clear();
}
inline std::string* VisitsData_Visit::add_treatments() {
  std::string* _s = _internal_add_treatments();
  // @@protoc_insertion_point(field_add_mutable:clinic_data.VisitsData.Visit.treatments)
  return _s;
}
inline const std::string& VisitsData_Visit::_internal_treatments(int index) const {
  return _impl_.treatments_.Get(index);
}
inline const std::string& VisitsData_Visit::treatments(int index) const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Visit.treatments)
  return _internal_treatments(index);
}
inline std::string* VisitsData_Visit::mutable_treatments(int index) {
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Visit.treatments)
  return _impl_.treatments_.Mutable(index);
}
inline void VisitsData_Visit::set_treatments(int index, const std::string& value) {
  _impl_.treatments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Visit.treatments)
}
inline void VisitsData_Visit::set_treatments(int index, std::string&& value) {
  _impl_.treatments_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Visit.treatments)
}
inline void VisitsData_Visit::set_treatments(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.treatments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clinic_data.VisitsData.Visit.treatments)
}
inline void VisitsData_Visit::set_treatments(int index, const char* value, size_t size) {
  _impl_.treatments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clinic_data.VisitsData.Visit.treatments)
}
inline std::string* VisitsData_Visit::_internal_add_treatments() {
  return _impl_.treatments_.Add();
}
inline void VisitsData_Visit::add_treatments(const std::string& value) {
  _impl_.treatments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clinic_data.VisitsData.Visit.treatments)
}
inline void VisitsData_Visit::add_treatments(std::string&& value) {
  _impl_.treatments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clinic_data.VisitsData.Visit.treatments)
}
inline void VisitsData_Visit::add_treatments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.treatments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clinic_data.VisitsData.Visit.treatments)
}
inline void VisitsData_Visit::add_treatments(const char* value, size_t size) {
  _impl_.treatments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clinic_data.VisitsData.Visit.treatments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VisitsData_Visit::treatments() const {
  // @@protoc_insertion_point(field_list:clinic_data.VisitsData.Visit.treatments)
  return _impl_.treatments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VisitsData_Visit::mutable_treatments() {
  // @@protoc_insertion_point(field_mutable_list:clinic_data.VisitsData.Visit.treatments)
  return &_impl_.treatments_;
}

// string visit_information = 5;
inline void VisitsData_Visit::clear_visit_information() {
  _impl_.visit_information_.ClearToEmpty();
}
inline const std::string& VisitsData_Visit::visit_information() const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Visit.visit_information)
  return _internal_visit_information();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VisitsData_Visit::set_visit_information(ArgT0&& arg0, ArgT... args) {
 
 _impl_.visit_information_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Visit.visit_information)
}
inline std::string* VisitsData_Visit::mutable_visit_information() {
  std::string* _s = _internal_mutable_visit_information();
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Visit.visit_information)
  return _s;
}
inline const std::string& VisitsData_Visit::_internal_visit_information() const {
  return _impl_.visit_information_.Get();
}
inline void VisitsData_Visit::_internal_set_visit_information(const std::string& value) {
  
  _impl_.visit_information_.Set(value, GetArenaForAllocation());
}
inline std::string* VisitsData_Visit::_internal_mutable_visit_information() {
  
  return _impl_.visit_information_.Mutable(GetArenaForAllocation());
}
inline std::string* VisitsData_Visit::release_visit_information() {
  // @@protoc_insertion_point(field_release:clinic_data.VisitsData.Visit.visit_information)
  return _impl_.visit_information_.Release();
}
inline void VisitsData_Visit::set_allocated_visit_information(std::string* visit_information) {
  if (visit_information != nullptr) {
    
  } else {
    
  }
  _impl_.visit_information_.SetAllocated(visit_information, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.visit_information_.IsDefault()) {
    _impl_.visit_information_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.VisitsData.Visit.visit_information)
}

// -------------------------------------------------------------------

// VisitsData_Doctor

// string name = 1;
inline void VisitsData_Doctor::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& VisitsData_Doctor::name() const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Doctor.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VisitsData_Doctor::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Doctor.name)
}
inline std::string* VisitsData_Doctor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Doctor.name)
  return _s;
}
inline const std::string& VisitsData_Doctor::_internal_name() const {
  return _impl_.name_.Get();
}
inline void VisitsData_Doctor::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* VisitsData_Doctor::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* VisitsData_Doctor::release_name() {
  // @@protoc_insertion_point(field_release:clinic_data.VisitsData.Doctor.name)
  return _impl_.name_.Release();
}
inline void VisitsData_Doctor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.VisitsData.Doctor.name)
}

// string surname = 2;
inline void VisitsData_Doctor::clear_surname() {
  _impl_.surname_.ClearToEmpty();
}
inline const std::string& VisitsData_Doctor::surname() const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Doctor.surname)
  return _internal_surname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VisitsData_Doctor::set_surname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.surname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Doctor.surname)
}
inline std::string* VisitsData_Doctor::mutable_surname() {
  std::string* _s = _internal_mutable_surname();
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Doctor.surname)
  return _s;
}
inline const std::string& VisitsData_Doctor::_internal_surname() const {
  return _impl_.surname_.Get();
}
inline void VisitsData_Doctor::_internal_set_surname(const std::string& value) {
  
  _impl_.surname_.Set(value, GetArenaForAllocation());
}
inline std::string* VisitsData_Doctor::_internal_mutable_surname() {
  
  return _impl_.surname_.Mutable(GetArenaForAllocation());
}
inline std::string* VisitsData_Doctor::release_surname() {
  // @@protoc_insertion_point(field_release:clinic_data.VisitsData.Doctor.surname)
  return _impl_.surname_.Release();
}
inline void VisitsData_Doctor::set_allocated_surname(std::string* surname) {
  if (surname != nullptr) {
    
  } else {
    
  }
  _impl_.surname_.SetAllocated(surname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.surname_.IsDefault()) {
    _impl_.surname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.VisitsData.Doctor.surname)
}

// string pesel = 3;
inline void VisitsData_Doctor::clear_pesel() {
  _impl_.pesel_.ClearToEmpty();
}
inline const std::string& VisitsData_Doctor::pesel() const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Doctor.pesel)
  return _internal_pesel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VisitsData_Doctor::set_pesel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pesel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Doctor.pesel)
}
inline std::string* VisitsData_Doctor::mutable_pesel() {
  std::string* _s = _internal_mutable_pesel();
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Doctor.pesel)
  return _s;
}
inline const std::string& VisitsData_Doctor::_internal_pesel() const {
  return _impl_.pesel_.Get();
}
inline void VisitsData_Doctor::_internal_set_pesel(const std::string& value) {
  
  _impl_.pesel_.Set(value, GetArenaForAllocation());
}
inline std::string* VisitsData_Doctor::_internal_mutable_pesel() {
  
  return _impl_.pesel_.Mutable(GetArenaForAllocation());
}
inline std::string* VisitsData_Doctor::release_pesel() {
  // @@protoc_insertion_point(field_release:clinic_data.VisitsData.Doctor.pesel)
  return _impl_.pesel_.Release();
}
inline void VisitsData_Doctor::set_allocated_pesel(std::string* pesel) {
  if (pesel != nullptr) {
    
  } else {
    
  }
  _impl_.pesel_.SetAllocated(pesel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pesel_.IsDefault()) {
    _impl_.pesel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.VisitsData.Doctor.pesel)
}

// string gender = 4;
inline void VisitsData_Doctor::clear_gender() {
  _impl_.gender_.ClearToEmpty();
}
inline const std::string& VisitsData_Doctor::gender() const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Doctor.gender)
  return _internal_gender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VisitsData_Doctor::set_gender(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Doctor.gender)
}
inline std::string* VisitsData_Doctor::mutable_gender() {
  std::string* _s = _internal_mutable_gender();
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Doctor.gender)
  return _s;
}
inline const std::string& VisitsData_Doctor::_internal_gender() const {
  return _impl_.gender_.Get();
}
inline void VisitsData_Doctor::_internal_set_gender(const std::string& value) {
  
  _impl_.gender_.Set(value, GetArenaForAllocation());
}
inline std::string* VisitsData_Doctor::_internal_mutable_gender() {
  
  return _impl_.gender_.Mutable(GetArenaForAllocation());
}
inline std::string* VisitsData_Doctor::release_gender() {
  // @@protoc_insertion_point(field_release:clinic_data.VisitsData.Doctor.gender)
  return _impl_.gender_.Release();
}
inline void VisitsData_Doctor::set_allocated_gender(std::string* gender) {
  if (gender != nullptr) {
    
  } else {
    
  }
  _impl_.gender_.SetAllocated(gender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gender_.IsDefault()) {
    _impl_.gender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.VisitsData.Doctor.gender)
}

// -------------------------------------------------------------------

// VisitsData_Patient

// string name = 1;
inline void VisitsData_Patient::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& VisitsData_Patient::name() const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Patient.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VisitsData_Patient::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Patient.name)
}
inline std::string* VisitsData_Patient::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Patient.name)
  return _s;
}
inline const std::string& VisitsData_Patient::_internal_name() const {
  return _impl_.name_.Get();
}
inline void VisitsData_Patient::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* VisitsData_Patient::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* VisitsData_Patient::release_name() {
  // @@protoc_insertion_point(field_release:clinic_data.VisitsData.Patient.name)
  return _impl_.name_.Release();
}
inline void VisitsData_Patient::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.VisitsData.Patient.name)
}

// string surname = 2;
inline void VisitsData_Patient::clear_surname() {
  _impl_.surname_.ClearToEmpty();
}
inline const std::string& VisitsData_Patient::surname() const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Patient.surname)
  return _internal_surname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VisitsData_Patient::set_surname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.surname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Patient.surname)
}
inline std::string* VisitsData_Patient::mutable_surname() {
  std::string* _s = _internal_mutable_surname();
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Patient.surname)
  return _s;
}
inline const std::string& VisitsData_Patient::_internal_surname() const {
  return _impl_.surname_.Get();
}
inline void VisitsData_Patient::_internal_set_surname(const std::string& value) {
  
  _impl_.surname_.Set(value, GetArenaForAllocation());
}
inline std::string* VisitsData_Patient::_internal_mutable_surname() {
  
  return _impl_.surname_.Mutable(GetArenaForAllocation());
}
inline std::string* VisitsData_Patient::release_surname() {
  // @@protoc_insertion_point(field_release:clinic_data.VisitsData.Patient.surname)
  return _impl_.surname_.Release();
}
inline void VisitsData_Patient::set_allocated_surname(std::string* surname) {
  if (surname != nullptr) {
    
  } else {
    
  }
  _impl_.surname_.SetAllocated(surname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.surname_.IsDefault()) {
    _impl_.surname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.VisitsData.Patient.surname)
}

// string pesel = 3;
inline void VisitsData_Patient::clear_pesel() {
  _impl_.pesel_.ClearToEmpty();
}
inline const std::string& VisitsData_Patient::pesel() const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Patient.pesel)
  return _internal_pesel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VisitsData_Patient::set_pesel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pesel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Patient.pesel)
}
inline std::string* VisitsData_Patient::mutable_pesel() {
  std::string* _s = _internal_mutable_pesel();
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Patient.pesel)
  return _s;
}
inline const std::string& VisitsData_Patient::_internal_pesel() const {
  return _impl_.pesel_.Get();
}
inline void VisitsData_Patient::_internal_set_pesel(const std::string& value) {
  
  _impl_.pesel_.Set(value, GetArenaForAllocation());
}
inline std::string* VisitsData_Patient::_internal_mutable_pesel() {
  
  return _impl_.pesel_.Mutable(GetArenaForAllocation());
}
inline std::string* VisitsData_Patient::release_pesel() {
  // @@protoc_insertion_point(field_release:clinic_data.VisitsData.Patient.pesel)
  return _impl_.pesel_.Release();
}
inline void VisitsData_Patient::set_allocated_pesel(std::string* pesel) {
  if (pesel != nullptr) {
    
  } else {
    
  }
  _impl_.pesel_.SetAllocated(pesel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pesel_.IsDefault()) {
    _impl_.pesel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.VisitsData.Patient.pesel)
}

// string gender = 4;
inline void VisitsData_Patient::clear_gender() {
  _impl_.gender_.ClearToEmpty();
}
inline const std::string& VisitsData_Patient::gender() const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Patient.gender)
  return _internal_gender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VisitsData_Patient::set_gender(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Patient.gender)
}
inline std::string* VisitsData_Patient::mutable_gender() {
  std::string* _s = _internal_mutable_gender();
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Patient.gender)
  return _s;
}
inline const std::string& VisitsData_Patient::_internal_gender() const {
  return _impl_.gender_.Get();
}
inline void VisitsData_Patient::_internal_set_gender(const std::string& value) {
  
  _impl_.gender_.Set(value, GetArenaForAllocation());
}
inline std::string* VisitsData_Patient::_internal_mutable_gender() {
  
  return _impl_.gender_.Mutable(GetArenaForAllocation());
}
inline std::string* VisitsData_Patient::release_gender() {
  // @@protoc_insertion_point(field_release:clinic_data.VisitsData.Patient.gender)
  return _impl_.gender_.Release();
}
inline void VisitsData_Patient::set_allocated_gender(std::string* gender) {
  if (gender != nullptr) {
    
  } else {
    
  }
  _impl_.gender_.SetAllocated(gender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gender_.IsDefault()) {
    _impl_.gender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.VisitsData.Patient.gender)
}

// string allergens = 5;
inline void VisitsData_Patient::clear_allergens() {
  _impl_.allergens_.ClearToEmpty();
}
inline const std::string& VisitsData_Patient::allergens() const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Patient.allergens)
  return _internal_allergens();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VisitsData_Patient::set_allergens(ArgT0&& arg0, ArgT... args) {
 
 _impl_.allergens_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Patient.allergens)
}
inline std::string* VisitsData_Patient::mutable_allergens() {
  std::string* _s = _internal_mutable_allergens();
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Patient.allergens)
  return _s;
}
inline const std::string& VisitsData_Patient::_internal_allergens() const {
  return _impl_.allergens_.Get();
}
inline void VisitsData_Patient::_internal_set_allergens(const std::string& value) {
  
  _impl_.allergens_.Set(value, GetArenaForAllocation());
}
inline std::string* VisitsData_Patient::_internal_mutable_allergens() {
  
  return _impl_.allergens_.Mutable(GetArenaForAllocation());
}
inline std::string* VisitsData_Patient::release_allergens() {
  // @@protoc_insertion_point(field_release:clinic_data.VisitsData.Patient.allergens)
  return _impl_.allergens_.Release();
}
inline void VisitsData_Patient::set_allocated_allergens(std::string* allergens) {
  if (allergens != nullptr) {
    
  } else {
    
  }
  _impl_.allergens_.SetAllocated(allergens, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.allergens_.IsDefault()) {
    _impl_.allergens_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.VisitsData.Patient.allergens)
}

// string debt = 6;
inline void VisitsData_Patient::clear_debt() {
  _impl_.debt_.ClearToEmpty();
}
inline const std::string& VisitsData_Patient::debt() const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Patient.debt)
  return _internal_debt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VisitsData_Patient::set_debt(ArgT0&& arg0, ArgT... args) {
 
 _impl_.debt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Patient.debt)
}
inline std::string* VisitsData_Patient::mutable_debt() {
  std::string* _s = _internal_mutable_debt();
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Patient.debt)
  return _s;
}
inline const std::string& VisitsData_Patient::_internal_debt() const {
  return _impl_.debt_.Get();
}
inline void VisitsData_Patient::_internal_set_debt(const std::string& value) {
  
  _impl_.debt_.Set(value, GetArenaForAllocation());
}
inline std::string* VisitsData_Patient::_internal_mutable_debt() {
  
  return _impl_.debt_.Mutable(GetArenaForAllocation());
}
inline std::string* VisitsData_Patient::release_debt() {
  // @@protoc_insertion_point(field_release:clinic_data.VisitsData.Patient.debt)
  return _impl_.debt_.Release();
}
inline void VisitsData_Patient::set_allocated_debt(std::string* debt) {
  if (debt != nullptr) {
    
  } else {
    
  }
  _impl_.debt_.SetAllocated(debt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.debt_.IsDefault()) {
    _impl_.debt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.VisitsData.Patient.debt)
}

// -------------------------------------------------------------------

// VisitsData_Room

// uint32 room_id = 1;
inline void VisitsData_Room::clear_room_id() {
  _impl_.room_id_ = 0u;
}
inline uint32_t VisitsData_Room::_internal_room_id() const {
  return _impl_.room_id_;
}
inline uint32_t VisitsData_Room::room_id() const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Room.room_id)
  return _internal_room_id();
}
inline void VisitsData_Room::_internal_set_room_id(uint32_t value) {
  
  _impl_.room_id_ = value;
}
inline void VisitsData_Room::set_room_id(uint32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Room.room_id)
}

// repeated string treatment = 2;
inline int VisitsData_Room::_internal_treatment_size() const {
  return _impl_.treatment_.size();
}
inline int VisitsData_Room::treatment_size() const {
  return _internal_treatment_size();
}
inline void VisitsData_Room::clear_treatment() {
  _impl_.treatment_.Clear();
}
inline std::string* VisitsData_Room::add_treatment() {
  std::string* _s = _internal_add_treatment();
  // @@protoc_insertion_point(field_add_mutable:clinic_data.VisitsData.Room.treatment)
  return _s;
}
inline const std::string& VisitsData_Room::_internal_treatment(int index) const {
  return _impl_.treatment_.Get(index);
}
inline const std::string& VisitsData_Room::treatment(int index) const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Room.treatment)
  return _internal_treatment(index);
}
inline std::string* VisitsData_Room::mutable_treatment(int index) {
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Room.treatment)
  return _impl_.treatment_.Mutable(index);
}
inline void VisitsData_Room::set_treatment(int index, const std::string& value) {
  _impl_.treatment_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Room.treatment)
}
inline void VisitsData_Room::set_treatment(int index, std::string&& value) {
  _impl_.treatment_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:clinic_data.VisitsData.Room.treatment)
}
inline void VisitsData_Room::set_treatment(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.treatment_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clinic_data.VisitsData.Room.treatment)
}
inline void VisitsData_Room::set_treatment(int index, const char* value, size_t size) {
  _impl_.treatment_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clinic_data.VisitsData.Room.treatment)
}
inline std::string* VisitsData_Room::_internal_add_treatment() {
  return _impl_.treatment_.Add();
}
inline void VisitsData_Room::add_treatment(const std::string& value) {
  _impl_.treatment_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clinic_data.VisitsData.Room.treatment)
}
inline void VisitsData_Room::add_treatment(std::string&& value) {
  _impl_.treatment_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clinic_data.VisitsData.Room.treatment)
}
inline void VisitsData_Room::add_treatment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.treatment_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clinic_data.VisitsData.Room.treatment)
}
inline void VisitsData_Room::add_treatment(const char* value, size_t size) {
  _impl_.treatment_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clinic_data.VisitsData.Room.treatment)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VisitsData_Room::treatment() const {
  // @@protoc_insertion_point(field_list:clinic_data.VisitsData.Room.treatment)
  return _impl_.treatment_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VisitsData_Room::mutable_treatment() {
  // @@protoc_insertion_point(field_mutable_list:clinic_data.VisitsData.Room.treatment)
  return &_impl_.treatment_;
}

// -------------------------------------------------------------------

// VisitsData_Visits

// repeated .clinic_data.VisitsData.Visit visits = 1;
inline int VisitsData_Visits::_internal_visits_size() const {
  return _impl_.visits_.size();
}
inline int VisitsData_Visits::visits_size() const {
  return _internal_visits_size();
}
inline void VisitsData_Visits::clear_visits() {
  _impl_.visits_.Clear();
}
inline ::clinic_data::VisitsData_Visit* VisitsData_Visits::mutable_visits(int index) {
  // @@protoc_insertion_point(field_mutable:clinic_data.VisitsData.Visits.visits)
  return _impl_.visits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clinic_data::VisitsData_Visit >*
VisitsData_Visits::mutable_visits() {
  // @@protoc_insertion_point(field_mutable_list:clinic_data.VisitsData.Visits.visits)
  return &_impl_.visits_;
}
inline const ::clinic_data::VisitsData_Visit& VisitsData_Visits::_internal_visits(int index) const {
  return _impl_.visits_.Get(index);
}
inline const ::clinic_data::VisitsData_Visit& VisitsData_Visits::visits(int index) const {
  // @@protoc_insertion_point(field_get:clinic_data.VisitsData.Visits.visits)
  return _internal_visits(index);
}
inline ::clinic_data::VisitsData_Visit* VisitsData_Visits::_internal_add_visits() {
  return _impl_.visits_.Add();
}
inline ::clinic_data::VisitsData_Visit* VisitsData_Visits::add_visits() {
  ::clinic_data::VisitsData_Visit* _add = _internal_add_visits();
  // @@protoc_insertion_point(field_add:clinic_data.VisitsData.Visits.visits)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clinic_data::VisitsData_Visit >&
VisitsData_Visits::visits() const {
  // @@protoc_insertion_point(field_list:clinic_data.VisitsData.Visits.visits)
  return _impl_.visits_;
}

// -------------------------------------------------------------------

// VisitsData

// -------------------------------------------------------------------

// Workers_Doctor

// string name = 1;
inline void Workers_Doctor::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Workers_Doctor::name() const {
  // @@protoc_insertion_point(field_get:clinic_data.Workers.Doctor.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Workers_Doctor::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.Workers.Doctor.name)
}
inline std::string* Workers_Doctor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:clinic_data.Workers.Doctor.name)
  return _s;
}
inline const std::string& Workers_Doctor::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Workers_Doctor::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Workers_Doctor::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Workers_Doctor::release_name() {
  // @@protoc_insertion_point(field_release:clinic_data.Workers.Doctor.name)
  return _impl_.name_.Release();
}
inline void Workers_Doctor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.Workers.Doctor.name)
}

// string surname = 2;
inline void Workers_Doctor::clear_surname() {
  _impl_.surname_.ClearToEmpty();
}
inline const std::string& Workers_Doctor::surname() const {
  // @@protoc_insertion_point(field_get:clinic_data.Workers.Doctor.surname)
  return _internal_surname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Workers_Doctor::set_surname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.surname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.Workers.Doctor.surname)
}
inline std::string* Workers_Doctor::mutable_surname() {
  std::string* _s = _internal_mutable_surname();
  // @@protoc_insertion_point(field_mutable:clinic_data.Workers.Doctor.surname)
  return _s;
}
inline const std::string& Workers_Doctor::_internal_surname() const {
  return _impl_.surname_.Get();
}
inline void Workers_Doctor::_internal_set_surname(const std::string& value) {
  
  _impl_.surname_.Set(value, GetArenaForAllocation());
}
inline std::string* Workers_Doctor::_internal_mutable_surname() {
  
  return _impl_.surname_.Mutable(GetArenaForAllocation());
}
inline std::string* Workers_Doctor::release_surname() {
  // @@protoc_insertion_point(field_release:clinic_data.Workers.Doctor.surname)
  return _impl_.surname_.Release();
}
inline void Workers_Doctor::set_allocated_surname(std::string* surname) {
  if (surname != nullptr) {
    
  } else {
    
  }
  _impl_.surname_.SetAllocated(surname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.surname_.IsDefault()) {
    _impl_.surname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.Workers.Doctor.surname)
}

// string pesel = 3;
inline void Workers_Doctor::clear_pesel() {
  _impl_.pesel_.ClearToEmpty();
}
inline const std::string& Workers_Doctor::pesel() const {
  // @@protoc_insertion_point(field_get:clinic_data.Workers.Doctor.pesel)
  return _internal_pesel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Workers_Doctor::set_pesel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pesel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.Workers.Doctor.pesel)
}
inline std::string* Workers_Doctor::mutable_pesel() {
  std::string* _s = _internal_mutable_pesel();
  // @@protoc_insertion_point(field_mutable:clinic_data.Workers.Doctor.pesel)
  return _s;
}
inline const std::string& Workers_Doctor::_internal_pesel() const {
  return _impl_.pesel_.Get();
}
inline void Workers_Doctor::_internal_set_pesel(const std::string& value) {
  
  _impl_.pesel_.Set(value, GetArenaForAllocation());
}
inline std::string* Workers_Doctor::_internal_mutable_pesel() {
  
  return _impl_.pesel_.Mutable(GetArenaForAllocation());
}
inline std::string* Workers_Doctor::release_pesel() {
  // @@protoc_insertion_point(field_release:clinic_data.Workers.Doctor.pesel)
  return _impl_.pesel_.Release();
}
inline void Workers_Doctor::set_allocated_pesel(std::string* pesel) {
  if (pesel != nullptr) {
    
  } else {
    
  }
  _impl_.pesel_.SetAllocated(pesel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pesel_.IsDefault()) {
    _impl_.pesel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.Workers.Doctor.pesel)
}

// string gender = 4;
inline void Workers_Doctor::clear_gender() {
  _impl_.gender_.ClearToEmpty();
}
inline const std::string& Workers_Doctor::gender() const {
  // @@protoc_insertion_point(field_get:clinic_data.Workers.Doctor.gender)
  return _internal_gender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Workers_Doctor::set_gender(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.Workers.Doctor.gender)
}
inline std::string* Workers_Doctor::mutable_gender() {
  std::string* _s = _internal_mutable_gender();
  // @@protoc_insertion_point(field_mutable:clinic_data.Workers.Doctor.gender)
  return _s;
}
inline const std::string& Workers_Doctor::_internal_gender() const {
  return _impl_.gender_.Get();
}
inline void Workers_Doctor::_internal_set_gender(const std::string& value) {
  
  _impl_.gender_.Set(value, GetArenaForAllocation());
}
inline std::string* Workers_Doctor::_internal_mutable_gender() {
  
  return _impl_.gender_.Mutable(GetArenaForAllocation());
}
inline std::string* Workers_Doctor::release_gender() {
  // @@protoc_insertion_point(field_release:clinic_data.Workers.Doctor.gender)
  return _impl_.gender_.Release();
}
inline void Workers_Doctor::set_allocated_gender(std::string* gender) {
  if (gender != nullptr) {
    
  } else {
    
  }
  _impl_.gender_.SetAllocated(gender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gender_.IsDefault()) {
    _impl_.gender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.Workers.Doctor.gender)
}

// -------------------------------------------------------------------

// Workers_Receptionist

// string name = 1;
inline void Workers_Receptionist::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Workers_Receptionist::name() const {
  // @@protoc_insertion_point(field_get:clinic_data.Workers.Receptionist.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Workers_Receptionist::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.Workers.Receptionist.name)
}
inline std::string* Workers_Receptionist::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:clinic_data.Workers.Receptionist.name)
  return _s;
}
inline const std::string& Workers_Receptionist::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Workers_Receptionist::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Workers_Receptionist::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Workers_Receptionist::release_name() {
  // @@protoc_insertion_point(field_release:clinic_data.Workers.Receptionist.name)
  return _impl_.name_.Release();
}
inline void Workers_Receptionist::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.Workers.Receptionist.name)
}

// string surname = 2;
inline void Workers_Receptionist::clear_surname() {
  _impl_.surname_.ClearToEmpty();
}
inline const std::string& Workers_Receptionist::surname() const {
  // @@protoc_insertion_point(field_get:clinic_data.Workers.Receptionist.surname)
  return _internal_surname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Workers_Receptionist::set_surname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.surname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.Workers.Receptionist.surname)
}
inline std::string* Workers_Receptionist::mutable_surname() {
  std::string* _s = _internal_mutable_surname();
  // @@protoc_insertion_point(field_mutable:clinic_data.Workers.Receptionist.surname)
  return _s;
}
inline const std::string& Workers_Receptionist::_internal_surname() const {
  return _impl_.surname_.Get();
}
inline void Workers_Receptionist::_internal_set_surname(const std::string& value) {
  
  _impl_.surname_.Set(value, GetArenaForAllocation());
}
inline std::string* Workers_Receptionist::_internal_mutable_surname() {
  
  return _impl_.surname_.Mutable(GetArenaForAllocation());
}
inline std::string* Workers_Receptionist::release_surname() {
  // @@protoc_insertion_point(field_release:clinic_data.Workers.Receptionist.surname)
  return _impl_.surname_.Release();
}
inline void Workers_Receptionist::set_allocated_surname(std::string* surname) {
  if (surname != nullptr) {
    
  } else {
    
  }
  _impl_.surname_.SetAllocated(surname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.surname_.IsDefault()) {
    _impl_.surname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.Workers.Receptionist.surname)
}

// string pesel = 3;
inline void Workers_Receptionist::clear_pesel() {
  _impl_.pesel_.ClearToEmpty();
}
inline const std::string& Workers_Receptionist::pesel() const {
  // @@protoc_insertion_point(field_get:clinic_data.Workers.Receptionist.pesel)
  return _internal_pesel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Workers_Receptionist::set_pesel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pesel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.Workers.Receptionist.pesel)
}
inline std::string* Workers_Receptionist::mutable_pesel() {
  std::string* _s = _internal_mutable_pesel();
  // @@protoc_insertion_point(field_mutable:clinic_data.Workers.Receptionist.pesel)
  return _s;
}
inline const std::string& Workers_Receptionist::_internal_pesel() const {
  return _impl_.pesel_.Get();
}
inline void Workers_Receptionist::_internal_set_pesel(const std::string& value) {
  
  _impl_.pesel_.Set(value, GetArenaForAllocation());
}
inline std::string* Workers_Receptionist::_internal_mutable_pesel() {
  
  return _impl_.pesel_.Mutable(GetArenaForAllocation());
}
inline std::string* Workers_Receptionist::release_pesel() {
  // @@protoc_insertion_point(field_release:clinic_data.Workers.Receptionist.pesel)
  return _impl_.pesel_.Release();
}
inline void Workers_Receptionist::set_allocated_pesel(std::string* pesel) {
  if (pesel != nullptr) {
    
  } else {
    
  }
  _impl_.pesel_.SetAllocated(pesel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pesel_.IsDefault()) {
    _impl_.pesel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.Workers.Receptionist.pesel)
}

// string gender = 4;
inline void Workers_Receptionist::clear_gender() {
  _impl_.gender_.ClearToEmpty();
}
inline const std::string& Workers_Receptionist::gender() const {
  // @@protoc_insertion_point(field_get:clinic_data.Workers.Receptionist.gender)
  return _internal_gender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Workers_Receptionist::set_gender(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clinic_data.Workers.Receptionist.gender)
}
inline std::string* Workers_Receptionist::mutable_gender() {
  std::string* _s = _internal_mutable_gender();
  // @@protoc_insertion_point(field_mutable:clinic_data.Workers.Receptionist.gender)
  return _s;
}
inline const std::string& Workers_Receptionist::_internal_gender() const {
  return _impl_.gender_.Get();
}
inline void Workers_Receptionist::_internal_set_gender(const std::string& value) {
  
  _impl_.gender_.Set(value, GetArenaForAllocation());
}
inline std::string* Workers_Receptionist::_internal_mutable_gender() {
  
  return _impl_.gender_.Mutable(GetArenaForAllocation());
}
inline std::string* Workers_Receptionist::release_gender() {
  // @@protoc_insertion_point(field_release:clinic_data.Workers.Receptionist.gender)
  return _impl_.gender_.Release();
}
inline void Workers_Receptionist::set_allocated_gender(std::string* gender) {
  if (gender != nullptr) {
    
  } else {
    
  }
  _impl_.gender_.SetAllocated(gender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gender_.IsDefault()) {
    _impl_.gender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clinic_data.Workers.Receptionist.gender)
}

// -------------------------------------------------------------------

// Workers_Doctors

// repeated .clinic_data.Workers.Doctor doctors = 1;
inline int Workers_Doctors::_internal_doctors_size() const {
  return _impl_.doctors_.size();
}
inline int Workers_Doctors::doctors_size() const {
  return _internal_doctors_size();
}
inline void Workers_Doctors::clear_doctors() {
  _impl_.doctors_.Clear();
}
inline ::clinic_data::Workers_Doctor* Workers_Doctors::mutable_doctors(int index) {
  // @@protoc_insertion_point(field_mutable:clinic_data.Workers.Doctors.doctors)
  return _impl_.doctors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clinic_data::Workers_Doctor >*
Workers_Doctors::mutable_doctors() {
  // @@protoc_insertion_point(field_mutable_list:clinic_data.Workers.Doctors.doctors)
  return &_impl_.doctors_;
}
inline const ::clinic_data::Workers_Doctor& Workers_Doctors::_internal_doctors(int index) const {
  return _impl_.doctors_.Get(index);
}
inline const ::clinic_data::Workers_Doctor& Workers_Doctors::doctors(int index) const {
  // @@protoc_insertion_point(field_get:clinic_data.Workers.Doctors.doctors)
  return _internal_doctors(index);
}
inline ::clinic_data::Workers_Doctor* Workers_Doctors::_internal_add_doctors() {
  return _impl_.doctors_.Add();
}
inline ::clinic_data::Workers_Doctor* Workers_Doctors::add_doctors() {
  ::clinic_data::Workers_Doctor* _add = _internal_add_doctors();
  // @@protoc_insertion_point(field_add:clinic_data.Workers.Doctors.doctors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clinic_data::Workers_Doctor >&
Workers_Doctors::doctors() const {
  // @@protoc_insertion_point(field_list:clinic_data.Workers.Doctors.doctors)
  return _impl_.doctors_;
}

// -------------------------------------------------------------------

// Workers_Receptionists

// repeated .clinic_data.Workers.Receptionist receptionists = 1;
inline int Workers_Receptionists::_internal_receptionists_size() const {
  return _impl_.receptionists_.size();
}
inline int Workers_Receptionists::receptionists_size() const {
  return _internal_receptionists_size();
}
inline void Workers_Receptionists::clear_receptionists() {
  _impl_.receptionists_.Clear();
}
inline ::clinic_data::Workers_Receptionist* Workers_Receptionists::mutable_receptionists(int index) {
  // @@protoc_insertion_point(field_mutable:clinic_data.Workers.Receptionists.receptionists)
  return _impl_.receptionists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clinic_data::Workers_Receptionist >*
Workers_Receptionists::mutable_receptionists() {
  // @@protoc_insertion_point(field_mutable_list:clinic_data.Workers.Receptionists.receptionists)
  return &_impl_.receptionists_;
}
inline const ::clinic_data::Workers_Receptionist& Workers_Receptionists::_internal_receptionists(int index) const {
  return _impl_.receptionists_.Get(index);
}
inline const ::clinic_data::Workers_Receptionist& Workers_Receptionists::receptionists(int index) const {
  // @@protoc_insertion_point(field_get:clinic_data.Workers.Receptionists.receptionists)
  return _internal_receptionists(index);
}
inline ::clinic_data::Workers_Receptionist* Workers_Receptionists::_internal_add_receptionists() {
  return _impl_.receptionists_.Add();
}
inline ::clinic_data::Workers_Receptionist* Workers_Receptionists::add_receptionists() {
  ::clinic_data::Workers_Receptionist* _add = _internal_add_receptionists();
  // @@protoc_insertion_point(field_add:clinic_data.Workers.Receptionists.receptionists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clinic_data::Workers_Receptionist >&
Workers_Receptionists::receptionists() const {
  // @@protoc_insertion_point(field_list:clinic_data.Workers.Receptionists.receptionists)
  return _impl_.receptionists_;
}

// -------------------------------------------------------------------

// Workers

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace clinic_data

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_clinic_2eproto
